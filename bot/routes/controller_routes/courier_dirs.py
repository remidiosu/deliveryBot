from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from services.user_api_service import fetch_couriers, add_courier_to_controller, get_courier_by_phone

from states.controller_states import AddCourierFSM
from keyboards.directory_kb import add_courier_kb
from routes.auth_routes.util import normalize_phone
from routes.controller_routes.directories import show_directories

router = Router()


@router.callback_query(F.data == "dir:couriers:list")
async def list_couriers(cb: CallbackQuery):
    controller_id = cb.from_user.id 
    response = await fetch_couriers(controller_id)
    couriers = response["data"]["couriers"]

    if not couriers:
        await cb.message.edit_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤.")
        return

    text = "üìã –í–∞—à–∏ –∫—É—Ä—å–µ—Ä—ã:\n\n"
    for c in couriers:
        text += f"‚Ä¢ {c.get('full_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')} (—Ç–µ–ª: {c.get('phone_number', '(–æ—à–∏–±–∫–∞, –Ω–æ–º–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω)')})\n"

    await cb.message.edit_text(text)


@router.callback_query(F.data == "dir:couriers:add")
async def add_courier(cb: CallbackQuery, state: FSMContext):
    await state.set_state(AddCourierFSM.waiting_for_phone)
    await cb.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫—É—Ä—å–µ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:")


@router.message(AddCourierFSM.waiting_for_phone, F.text)
async def process_courier_phone(message: Message, state: FSMContext):
    raw = message.text.strip()
    phone_number = normalize_phone(raw)
    
    if not phone_number:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –µ—â—ë —Ä–∞–∑ (—Ä–∞–∑—Ä–µ—à–µ–Ω—ã 7‚Äì15 —Ü–∏—Ñ—Ä, —Å '+')."
        )
        return await add_courier(message)
    
    try:
        response = await get_courier_by_phone(phone_number)
        preview = response.get("data")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫—É—Ä—å–µ—Ä–∞.")
        return await show_directories(message, is_registered=True, role='–∞–¥–º–∏–Ω')

    if not preview: 
        await message.answer("–ù–µ –Ω–∞—à—ë–ª –∫—É—Ä—å–µ—Ä–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º.")
        return await show_directories(message, is_registered=True, role='–∞–¥–º–∏–Ω')

    await state.update_data(phone=phone_number, preview=preview)
    await state.set_state(AddCourierFSM.confirming)

    name = preview.get("full_name") or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    tg_id = preview.get("telegram_id") or "‚Äî"
    text = (
        "–ù–∞—à—ë–ª –∫—É—Ä—å–µ—Ä–∞:\n"
        f"‚Ä¢ –ò–º—è: {name}\n"
        f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n"
        f"‚Ä¢ Telegram ID: {tg_id}"
    ) 

    await message.answer(text, reply_markup=add_courier_kb(phone_number))


@router.callback_query(F.data.startswith("dir:couriers:add:confirm:"))
async def confirm_add_courier(cb: CallbackQuery, state: FSMContext):
    controller_id = cb.from_user.id
    phone = cb.data.split("dir:couriers:add:confirm:", 1)[1].strip()

    # –ø–æ–¥—Å—Ç—Ä–∞—Ö—É–µ–º—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º: –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –Ω–æ–º–µ—Ä ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    data = await state.get_data()
    phone = data.get("phone") or phone

    try:
        await add_courier_to_controller(controller_id, phone)
    except Exception as e:
        await cb.message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—å–µ—Ä–∞")
        await state.clear()
        return 
    
    name = (data.get("preview") or {}).get("full_name") or "–ö—É—Ä—å–µ—Ä"
    await cb.message.edit_text(f"‚úÖ {name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –≤–∞—à–µ–º—É —Å–ø–∏—Å–∫—É.")
    await state.clear()


@router.callback_query(F.data == "dir:couriers:add:cancel")
async def cancel_add_courier(cb: CallbackQuery, state: FSMContext):
    await state.clear()
    await cb.message.edit_text("–û—Ç–º–µ–Ω–µ–Ω–æ. –ö—É—Ä—å–µ—Ä –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω.")
