from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from aiogram.types import (
    Message,
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)

from states.profile_states import ProfileFSM
from keyboards.profile_kb import profile_menu_kb
from routes.auth_routes.start_cmd import start
from routes.auth_routes.util import normalize_phone
from services.api_service import fetch_user, update_user


router = Router()


@router.message(Command("profile"))
async def profile_entry(message: Message, state: FSMContext):
    tg_id = message.from_user.id  # type: ignore
    actor = await fetch_user(tg_id)

    if not actor.get('data'):
        await message.answer("–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ü–∏—é –ø–æ –∫–æ–º–∞–Ω–¥–µ /start")
        await state.clear()
        await start(message, state)
        return
    
    profile = actor['data']
    full_name = profile.get("full_name")
    phone = profile.get("phone_number")

    text = (
        "üìÑ *–ü—Ä–æ—Ñ–∏–ª—å*\n\n"
        f"–ò–º—è: {full_name}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
        "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"
    )
    await state.set_state(ProfileFSM.choose_field)
    await message.answer(text, reply_markup=profile_menu_kb(), parse_mode="Markdown")


@router.message(ProfileFSM.choose_field, F.text.lower().in_(["–∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è", "–∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", "–æ—Ç–º–µ–Ω–∞"]))
async def profile_choose(message: Message, state: FSMContext):
    choice = message.text.lower() # type: ignore

    if choice == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û–∫, –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º.", reply_markup=ReplyKeyboardRemove())
        return

    if choice == "–∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è":
        await state.set_state(ProfileFSM.ask_full_name)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ *–ø–æ–ª–Ω–æ–µ –∏–º—è*:", parse_mode="Markdown", reply_markup=ReplyKeyboardRemove())
        return

    if choice == "–∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω":
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]],
            resize_keyboard=True,
            one_time_keyboard=True,
        )
        await state.set_state(ProfileFSM.ask_phone)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7xxxxxxxxxx –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç:",
            reply_markup=kb,
        )
        return


@router.message(ProfileFSM.ask_full_name, F.text)
async def profile_set_full_name(message: Message, state: FSMContext):
    telegram_id = message.from_user.id  # type: ignore
    new_name = (message.text or "").strip()
    if len(new_name) < 2:
        await message.answer("–ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û.")
        return

    tg_id = message.from_user.id  # type: ignore
    actor = await fetch_user(tg_id)
    profile = actor.get('data')

    if not profile:
        await message.answer("–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ü–∏—é –ø–æ –∫–æ–º–∞–Ω–¥–µ /start")
        await state.clear()
        await start(message, state)
        return

    profile["full_name"] = new_name
    await update_user(telegram_id, **profile)

    await state.clear()
    await message.answer("–ì–æ—Ç–æ–≤–æ! –ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ", reply_markup=ReplyKeyboardRemove())


@router.message(ProfileFSM.ask_phone)
async def profile_set_phone(message: Message, state: FSMContext):
    raw_phone = None
    if message.contact and message.contact.phone_number:
        raw_phone = message.contact.phone_number
    elif message.text:
        raw_phone = message.text.strip()

    if not raw_phone:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç.")
        return

    phone = normalize_phone(raw_phone)
    if not phone:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    telegram_id = message.from_user.id #type: ignore
    actor = await fetch_user(telegram_id)
    profile = actor.get('data')

    if not profile:
        await message.answer("–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ü–∏—é –ø–æ –∫–æ–º–∞–Ω–¥–µ /start")
        await state.clear()
        await start(message, state)
        return

    profile["phone_number"] = phone
    await update_user(telegram_id, **profile)

    await state.clear()
    await message.answer(f"–¢–µ–ª–µ—Ñ–æ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω: {phone} ‚úÖ", reply_markup=ReplyKeyboardRemove())
